// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc2866

import (
	"strconv"
	"time"

	"layeh.com/radius"
)

const (
	SipFromTag_Type        radius.Type = 101
	SipMethod_Type         radius.Type = 102
	SipResponseCode_Type   radius.Type = 103
	SipToTag_Type          radius.Type = 104
	SipCallID_Type         radius.Type = 105
	SipCallerID_Type       radius.Type = 110
	SipCalleeID_Type       radius.Type = 111
	SipDstNumber_Type      radius.Type = 112
	SipEndReason_Type      radius.Type = 113
	SipSession_Type        radius.Type = 114
	SipCallReason_Type     radius.Type = 115
	SipCallDuration_Type   radius.Type = 116
	SipCallMSDuration_Type radius.Type = 117
	SipCallSetuptime_Type  radius.Type = 118
	SipCallCreated_Type    radius.Type = 119
	SipAcctStatusType_Type radius.Type = 120
	SipServiceType_Type    radius.Type = 122
	SipEventTimestamp_Type radius.Type = 123
	SipAcctSessionID_Type  radius.Type = 124
)

func SipFromTag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipFromTag_Type, a)
	return
}

func SipFromTag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipFromTag_Type, a)
	return
}

func SipFromTag_Get(p *radius.Packet) (value []byte) {
	value, _ = SipFromTag_Lookup(p)
	return
}

func SipFromTag_GetString(p *radius.Packet) (value string) {
	value, _ = SipFromTag_LookupString(p)
	return
}

func SipFromTag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipFromTag_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipFromTag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipFromTag_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipFromTag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipFromTag_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipFromTag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipFromTag_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipFromTag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipFromTag_Type, a)
	return
}

func SipFromTag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipFromTag_Type, a)
	return
}

func SipFromTag_Del(p *radius.Packet) {
	p.Attributes.Del(SipFromTag_Type)
}

type SipMethod uint32

const (
	SipMethod_Value_Undefined SipMethod = 0
	SipMethod_Value_INVITE    SipMethod = 1
	SipMethod_Value_CANCEL    SipMethod = 2
	SipMethod_Value_ACK       SipMethod = 4
	SipMethod_Value_BYE       SipMethod = 8
	SipMethod_Value_INFO      SipMethod = 16
	SipMethod_Value_OPTIONS   SipMethod = 32
	SipMethod_Value_UPDATE    SipMethod = 64
	SipMethod_Value_REGISTER  SipMethod = 128
	SipMethod_Value_MESSAGE   SipMethod = 256
	SipMethod_Value_SUBSCRIBE SipMethod = 512
	SipMethod_Value_NOTIFY    SipMethod = 1024
	SipMethod_Value_PRACK     SipMethod = 2048
	SipMethod_Value_REFER     SipMethod = 4096
	SipMethod_Value_OTHER     SipMethod = 8192
)

var SipMethod_Strings = map[SipMethod]string{
	SipMethod_Value_Undefined: "Undefined",
	SipMethod_Value_INVITE:    "INVITE",
	SipMethod_Value_CANCEL:    "CANCEL",
	SipMethod_Value_ACK:       "ACK",
	SipMethod_Value_BYE:       "BYE",
	SipMethod_Value_INFO:      "INFO",
	SipMethod_Value_OPTIONS:   "OPTIONS",
	SipMethod_Value_UPDATE:    "UPDATE",
	SipMethod_Value_REGISTER:  "REGISTER",
	SipMethod_Value_MESSAGE:   "MESSAGE",
	SipMethod_Value_SUBSCRIBE: "SUBSCRIBE",
	SipMethod_Value_NOTIFY:    "NOTIFY",
	SipMethod_Value_PRACK:     "PRACK",
	SipMethod_Value_REFER:     "REFER",
	SipMethod_Value_OTHER:     "OTHER",
}

func (a SipMethod) String() string {
	if str, ok := SipMethod_Strings[a]; ok {
		return str
	}
	return "SipMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipMethod_Add(p *radius.Packet, value SipMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipMethod_Type, a)
	return
}

func SipMethod_Get(p *radius.Packet) (value SipMethod) {
	value, _ = SipMethod_Lookup(p)
	return
}

func SipMethod_Gets(p *radius.Packet) (values []SipMethod, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipMethod_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipMethod(i))
	}
	return
}

func SipMethod_Lookup(p *radius.Packet) (value SipMethod, err error) {
	a, ok := p.Lookup(SipMethod_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipMethod(i)
	return
}

func SipMethod_Set(p *radius.Packet, value SipMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipMethod_Type, a)
	return
}

func SipMethod_Del(p *radius.Packet) {
	p.Attributes.Del(SipMethod_Type)
}

func SipResponseCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipResponseCode_Type, a)
	return
}

func SipResponseCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipResponseCode_Type, a)
	return
}

func SipResponseCode_Get(p *radius.Packet) (value []byte) {
	value, _ = SipResponseCode_Lookup(p)
	return
}

func SipResponseCode_GetString(p *radius.Packet) (value string) {
	value, _ = SipResponseCode_LookupString(p)
	return
}

func SipResponseCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipResponseCode_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipResponseCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipResponseCode_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipResponseCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipResponseCode_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipResponseCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipResponseCode_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipResponseCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipResponseCode_Type, a)
	return
}

func SipResponseCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipResponseCode_Type, a)
	return
}

func SipResponseCode_Del(p *radius.Packet) {
	p.Attributes.Del(SipResponseCode_Type)
}

func SipToTag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipToTag_Type, a)
	return
}

func SipToTag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipToTag_Type, a)
	return
}

func SipToTag_Get(p *radius.Packet) (value []byte) {
	value, _ = SipToTag_Lookup(p)
	return
}

func SipToTag_GetString(p *radius.Packet) (value string) {
	value, _ = SipToTag_LookupString(p)
	return
}

func SipToTag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipToTag_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipToTag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipToTag_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipToTag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipToTag_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipToTag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipToTag_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipToTag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipToTag_Type, a)
	return
}

func SipToTag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipToTag_Type, a)
	return
}

func SipToTag_Del(p *radius.Packet) {
	p.Attributes.Del(SipToTag_Type)
}

func SipCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipCallID_Type, a)
	return
}

func SipCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipCallID_Type, a)
	return
}

func SipCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = SipCallID_Lookup(p)
	return
}

func SipCallID_GetString(p *radius.Packet) (value string) {
	value, _ = SipCallID_LookupString(p)
	return
}

func SipCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipCallID_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipCallID_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipCallID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipCallID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipCallID_Type, a)
	return
}

func SipCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipCallID_Type, a)
	return
}

func SipCallID_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallID_Type)
}

func SipCallerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipCallerID_Type, a)
	return
}

func SipCallerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipCallerID_Type, a)
	return
}

func SipCallerID_Get(p *radius.Packet) (value []byte) {
	value, _ = SipCallerID_Lookup(p)
	return
}

func SipCallerID_GetString(p *radius.Packet) (value string) {
	value, _ = SipCallerID_LookupString(p)
	return
}

func SipCallerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipCallerID_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipCallerID_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipCallerID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipCallerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipCallerID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipCallerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipCallerID_Type, a)
	return
}

func SipCallerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipCallerID_Type, a)
	return
}

func SipCallerID_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallerID_Type)
}

func SipCalleeID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipCalleeID_Type, a)
	return
}

func SipCalleeID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipCalleeID_Type, a)
	return
}

func SipCalleeID_Get(p *radius.Packet) (value []byte) {
	value, _ = SipCalleeID_Lookup(p)
	return
}

func SipCalleeID_GetString(p *radius.Packet) (value string) {
	value, _ = SipCalleeID_LookupString(p)
	return
}

func SipCalleeID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipCalleeID_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCalleeID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipCalleeID_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCalleeID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipCalleeID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipCalleeID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipCalleeID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipCalleeID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipCalleeID_Type, a)
	return
}

func SipCalleeID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipCalleeID_Type, a)
	return
}

func SipCalleeID_Del(p *radius.Packet) {
	p.Attributes.Del(SipCalleeID_Type)
}

func SipDstNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipDstNumber_Type, a)
	return
}

func SipDstNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipDstNumber_Type, a)
	return
}

func SipDstNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = SipDstNumber_Lookup(p)
	return
}

func SipDstNumber_GetString(p *radius.Packet) (value string) {
	value, _ = SipDstNumber_LookupString(p)
	return
}

func SipDstNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipDstNumber_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipDstNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipDstNumber_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipDstNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipDstNumber_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipDstNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipDstNumber_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipDstNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipDstNumber_Type, a)
	return
}

func SipDstNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipDstNumber_Type, a)
	return
}

func SipDstNumber_Del(p *radius.Packet) {
	p.Attributes.Del(SipDstNumber_Type)
}

func SipEndReason_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipEndReason_Type, a)
	return
}

func SipEndReason_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipEndReason_Type, a)
	return
}

func SipEndReason_Get(p *radius.Packet) (value []byte) {
	value, _ = SipEndReason_Lookup(p)
	return
}

func SipEndReason_GetString(p *radius.Packet) (value string) {
	value, _ = SipEndReason_LookupString(p)
	return
}

func SipEndReason_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipEndReason_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipEndReason_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipEndReason_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipEndReason_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipEndReason_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipEndReason_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipEndReason_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipEndReason_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipEndReason_Type, a)
	return
}

func SipEndReason_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipEndReason_Type, a)
	return
}

func SipEndReason_Del(p *radius.Packet) {
	p.Attributes.Del(SipEndReason_Type)
}

func SipSession_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipSession_Type, a)
	return
}

func SipSession_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipSession_Type, a)
	return
}

func SipSession_Get(p *radius.Packet) (value []byte) {
	value, _ = SipSession_Lookup(p)
	return
}

func SipSession_GetString(p *radius.Packet) (value string) {
	value, _ = SipSession_LookupString(p)
	return
}

func SipSession_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipSession_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipSession_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipSession_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipSession_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipSession_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipSession_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipSession_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipSession_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipSession_Type, a)
	return
}

func SipSession_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipSession_Type, a)
	return
}

func SipSession_Del(p *radius.Packet) {
	p.Attributes.Del(SipSession_Type)
}

func SipCallReason_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipCallReason_Type, a)
	return
}

func SipCallReason_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipCallReason_Type, a)
	return
}

func SipCallReason_Get(p *radius.Packet) (value []byte) {
	value, _ = SipCallReason_Lookup(p)
	return
}

func SipCallReason_GetString(p *radius.Packet) (value string) {
	value, _ = SipCallReason_LookupString(p)
	return
}

func SipCallReason_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipCallReason_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallReason_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipCallReason_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallReason_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipCallReason_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipCallReason_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipCallReason_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipCallReason_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipCallReason_Type, a)
	return
}

func SipCallReason_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipCallReason_Type, a)
	return
}

func SipCallReason_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallReason_Type)
}

type SipCallDuration uint32

var SipCallDuration_Strings = map[SipCallDuration]string{}

func (a SipCallDuration) String() string {
	if str, ok := SipCallDuration_Strings[a]; ok {
		return str
	}
	return "SipCallDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipCallDuration_Add(p *radius.Packet, value SipCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipCallDuration_Type, a)
	return
}

func SipCallDuration_Get(p *radius.Packet) (value SipCallDuration) {
	value, _ = SipCallDuration_Lookup(p)
	return
}

func SipCallDuration_Gets(p *radius.Packet) (values []SipCallDuration, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipCallDuration_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipCallDuration(i))
	}
	return
}

func SipCallDuration_Lookup(p *radius.Packet) (value SipCallDuration, err error) {
	a, ok := p.Lookup(SipCallDuration_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipCallDuration(i)
	return
}

func SipCallDuration_Set(p *radius.Packet, value SipCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipCallDuration_Type, a)
	return
}

func SipCallDuration_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallDuration_Type)
}

type SipCallMSDuration uint32

var SipCallMSDuration_Strings = map[SipCallMSDuration]string{}

func (a SipCallMSDuration) String() string {
	if str, ok := SipCallMSDuration_Strings[a]; ok {
		return str
	}
	return "SipCallMSDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipCallMSDuration_Add(p *radius.Packet, value SipCallMSDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipCallMSDuration_Type, a)
	return
}

func SipCallMSDuration_Get(p *radius.Packet) (value SipCallMSDuration) {
	value, _ = SipCallMSDuration_Lookup(p)
	return
}

func SipCallMSDuration_Gets(p *radius.Packet) (values []SipCallMSDuration, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipCallMSDuration_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipCallMSDuration(i))
	}
	return
}

func SipCallMSDuration_Lookup(p *radius.Packet) (value SipCallMSDuration, err error) {
	a, ok := p.Lookup(SipCallMSDuration_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipCallMSDuration(i)
	return
}

func SipCallMSDuration_Set(p *radius.Packet, value SipCallMSDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipCallMSDuration_Type, a)
	return
}

func SipCallMSDuration_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallMSDuration_Type)
}

type SipCallSetuptime uint32

var SipCallSetuptime_Strings = map[SipCallSetuptime]string{}

func (a SipCallSetuptime) String() string {
	if str, ok := SipCallSetuptime_Strings[a]; ok {
		return str
	}
	return "SipCallSetuptime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipCallSetuptime_Add(p *radius.Packet, value SipCallSetuptime) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipCallSetuptime_Type, a)
	return
}

func SipCallSetuptime_Get(p *radius.Packet) (value SipCallSetuptime) {
	value, _ = SipCallSetuptime_Lookup(p)
	return
}

func SipCallSetuptime_Gets(p *radius.Packet) (values []SipCallSetuptime, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipCallSetuptime_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipCallSetuptime(i))
	}
	return
}

func SipCallSetuptime_Lookup(p *radius.Packet) (value SipCallSetuptime, err error) {
	a, ok := p.Lookup(SipCallSetuptime_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipCallSetuptime(i)
	return
}

func SipCallSetuptime_Set(p *radius.Packet, value SipCallSetuptime) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipCallSetuptime_Type, a)
	return
}

func SipCallSetuptime_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallSetuptime_Type)
}

func SipCallCreated_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipCallCreated_Type, a)
	return
}

func SipCallCreated_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipCallCreated_Type, a)
	return
}

func SipCallCreated_Get(p *radius.Packet) (value []byte) {
	value, _ = SipCallCreated_Lookup(p)
	return
}

func SipCallCreated_GetString(p *radius.Packet) (value string) {
	value, _ = SipCallCreated_LookupString(p)
	return
}

func SipCallCreated_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipCallCreated_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallCreated_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipCallCreated_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipCallCreated_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipCallCreated_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipCallCreated_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipCallCreated_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipCallCreated_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipCallCreated_Type, a)
	return
}

func SipCallCreated_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipCallCreated_Type, a)
	return
}

func SipCallCreated_Del(p *radius.Packet) {
	p.Attributes.Del(SipCallCreated_Type)
}

type SipAcctStatusType uint32

const (
	SipAcctStatusType_Value_Start      SipAcctStatusType = 1
	SipAcctStatusType_Value_Stop       SipAcctStatusType = 2
	SipAcctStatusType_Value_Alive      SipAcctStatusType = 3
	SipAcctStatusType_Value_SipSession SipAcctStatusType = 15
)

var SipAcctStatusType_Strings = map[SipAcctStatusType]string{
	SipAcctStatusType_Value_Start:      "Start",
	SipAcctStatusType_Value_Stop:       "Stop",
	SipAcctStatusType_Value_Alive:      "Alive",
	SipAcctStatusType_Value_SipSession: "Sip-Session",
}

func (a SipAcctStatusType) String() string {
	if str, ok := SipAcctStatusType_Strings[a]; ok {
		return str
	}
	return "SipAcctStatusType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipAcctStatusType_Add(p *radius.Packet, value SipAcctStatusType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipAcctStatusType_Type, a)
	return
}

func SipAcctStatusType_Get(p *radius.Packet) (value SipAcctStatusType) {
	value, _ = SipAcctStatusType_Lookup(p)
	return
}

func SipAcctStatusType_Gets(p *radius.Packet) (values []SipAcctStatusType, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipAcctStatusType_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipAcctStatusType(i))
	}
	return
}

func SipAcctStatusType_Lookup(p *radius.Packet) (value SipAcctStatusType, err error) {
	a, ok := p.Lookup(SipAcctStatusType_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipAcctStatusType(i)
	return
}

func SipAcctStatusType_Set(p *radius.Packet, value SipAcctStatusType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipAcctStatusType_Type, a)
	return
}

func SipAcctStatusType_Del(p *radius.Packet) {
	p.Attributes.Del(SipAcctStatusType_Type)
}

type SipServiceType uint32

const (
	SipServiceType_Value_SipSession SipServiceType = 15
)

var SipServiceType_Strings = map[SipServiceType]string{
	SipServiceType_Value_SipSession: "Sip-Session",
}

func (a SipServiceType) String() string {
	if str, ok := SipServiceType_Strings[a]; ok {
		return str
	}
	return "SipServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SipServiceType_Add(p *radius.Packet, value SipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(SipServiceType_Type, a)
	return
}

func SipServiceType_Get(p *radius.Packet) (value SipServiceType) {
	value, _ = SipServiceType_Lookup(p)
	return
}

func SipServiceType_Gets(p *radius.Packet) (values []SipServiceType, err error) {
	var i uint32
	for _, attr := range p.Attributes[SipServiceType_Type] {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SipServiceType(i))
	}
	return
}

func SipServiceType_Lookup(p *radius.Packet) (value SipServiceType, err error) {
	a, ok := p.Lookup(SipServiceType_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SipServiceType(i)
	return
}

func SipServiceType_Set(p *radius.Packet, value SipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(SipServiceType_Type, a)
	return
}

func SipServiceType_Del(p *radius.Packet) {
	p.Attributes.Del(SipServiceType_Type)
}

func SipEventTimestamp_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	p.Add(SipEventTimestamp_Type, a)
	return
}

func SipEventTimestamp_Get(p *radius.Packet) (value time.Time) {
	value, _ = SipEventTimestamp_Lookup(p)
	return
}

func SipEventTimestamp_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range p.Attributes[SipEventTimestamp_Type] {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipEventTimestamp_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := p.Lookup(SipEventTimestamp_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func SipEventTimestamp_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	p.Set(SipEventTimestamp_Type, a)
	return
}

func SipEventTimestamp_Del(p *radius.Packet) {
	p.Attributes.Del(SipEventTimestamp_Type)
}

func SipAcctSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SipAcctSessionID_Type, a)
	return
}

func SipAcctSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SipAcctSessionID_Type, a)
	return
}

func SipAcctSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = SipAcctSessionID_Lookup(p)
	return
}

func SipAcctSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = SipAcctSessionID_LookupString(p)
	return
}

func SipAcctSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[SipAcctSessionID_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipAcctSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[SipAcctSessionID_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipAcctSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SipAcctSessionID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipAcctSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SipAcctSessionID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipAcctSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SipAcctSessionID_Type, a)
	return
}

func SipAcctSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SipAcctSessionID_Type, a)
	return
}

func SipAcctSessionID_Del(p *radius.Packet) {
	p.Attributes.Del(SipAcctSessionID_Type)
}
